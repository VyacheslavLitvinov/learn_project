1.     Какой командой можно инициализировать Git-репозиторий в проекте?
git init
2.     Какая команда используется, чтобы посмотреть состояние репозитория?
 git status
3.     Вы случайно выполнили команду git init в домашней директории, и теперь Git странно работает. Что можно сделать?
 Удалить папку .git.



4.     Что делает команда git add?
 запоминает текущее содержимое (контент) файла
 
Команда git add не сохраняет содержимое файлов в репозитории. Само сохранение, или фиксацию состояния файлов, называют коммитом (от англ. commit — «совершать», «фиксировать»). «Сделать коммит» значит сохранить текущую версию файла.
Если провести аналогию, команду git add можно сравнить с добавлением товаров в корзину в интернет-магазине, а коммит — с оформлением и оплатой заказа.



5.     Какими способами можно добавить файлы к сохранению?
 git add “name”
 git add -all добавить все файлы
 git add . добавить всю папку




6.     Как сделать коммит с сообщением?
 git commit -m “Мое сообщение”



7.     Как посмотреть историю коммитов?
 git log







8.     Какие проекты можно создавать в GitHub?
 приватный – только для вас
 командный – только для членов команды
 публичный – будет виден всем



9.     Чем отличается Git от GitHub?
 Git
 - консольный инструмент для работы с локальными и удалёнными репозиториями
- проект с открытым исходным кодом

 GitHub
 - платформа для размещения удаленных репозиториев




10. Что такое SSH?
 протокол, который обеспечивает безопасный обмен данными в сети и использует для этого ключи



11.  Что такое SSH-ключ?
 виртуальный идентификатор в GitHub. Как ключ от квартиры, он позволяет получить доступ к GitHub-репозиторию. Также SSH используется для доступа к другим удалённым серверам



12.  Из чего состоит SSH-ключ?
 состоит из двух частей — публичной и приватной. Публичный ключ зашифрует данные, а приватный — расшифрует. Приватным ключом ни в коем случае нельзя делиться, иначе любой сможет расшифровать все ваши секреты!



13. Что требуется для связи удаленного репозитория с локальным?
 Локальный репозиторий, удаленный репозиторий, SSH-ключ



14.  Какая команда привязывает удаленный репозиторий к локальному?
 git remote add



15.  Какие параметры передаются в git remote?
 имя удаленного репозитория(origin) и его URL
 git remote add origin git@github.com:%ИМЯ_АККАУНТА%/first-project.git



16.  Что означает origin при привязке локального и удаленного репозиториев?
 стандартный псевдоним, с помощью которого можно обращаться к главному удалённому репозиторию (обычно такой репозиторий один). Это значительно упрощает работу



17.  Как убедиться, что локальный и удаленный репозитории связаны?
 git remote -v


18.  Как отправить изменения на удаленный репозиторий?
 git push



19. Для чего используется флаг -u при первом пуше в локальный репозиторий?
 Флаг -u свяжет локальную ветку с одноимённой удалённой
 git push -u origin main



20.  Что писать в файл readme?
 - Название проекта и его краткое описание, кем создан, для чего, какие решает задачи и какие закрывает проблемы.
 - Технологии, которые применяются в проекте. В чем отличие от аналогичных.
 - Документация проекта – подробная инструкция о том, что представляет собой проект
 - Планы проекта, если они есть
 Вот пример файла https://github.com/git/git/blob/master/README.md




21. Что такое markdown?
 Специальный язык разметки, позволяет красиво оформить текстовый документ.

 Шпаргалка
 https://gist.github.com/fomvasss/8dd8cd7f88c67a4e3727f9d39224a84c

 Гайд
 https://www.markdownguide.org/cheat-sheet/



22. Что такое хеш коммита? И для чего он нужен?
 Хэш – основной идентификатор коммита.

 Хеширование – это способ преобразовать набор данных и получить их «отпечаток».
 Информация о коммите – это набор данных : когда был сделан коммит, содержимое файлов в репозитории на момент коммита и ссылка на предыдущий, или родительский
 Git хеширует (преобразует) информацию о коммите с помощью алгоритма SHA-1, и получает для каждого коммита свой уникальный хэш – результат хеширования.  

 Если вы знаете хэш, вы можете узнать всё остальное (автора и дату коммита и содержимое закоммиченных файлов.



23. Где храниться таблица соответствия (хеш --> информация о коммите)?
 в папке .git



24. Что является основным идентификатором коммита?
 хэш коммита, строка из 40 символов



25. Какой будет результат, если посчитать хеш одного и того же файла (одним и тем же алгоритмом) на двух разных компьютерах?
 Хеш-алгоритм выдаст одно и то же значение для одного набора данных – это не зависит от того, где и как он был запущен.



26.  Из чего состоит элемент описания коммита?



27.  Как получить сокращенный лог?
 git log -–neline




28. Что означает HEAD в описании коммита?
 Файл HEAD – один из служебных файлов папки .git. Он указывает на коммит, который сделан последним (то есть на самый новый свежий коммит)

29. В каких состояниях могут находится файлы?
untracked - не отслеживаемый 
staged - подготовленный
tracked - отслеживаемый
modified - измененный
30. Жизненный цикл файла в git

31. В какой статус переходит файл после выполнения git add?
staged

